// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  username         String     @unique
  name             String
  email            String     @unique
  password         String
  phoneNumber      String     @unique
  biography        String?
  medicalNeeds     String?
  address          String     @unique
  sentMessages     Messages[] @relation("sender")
  receivedMessages Messages[] @relation("receiver")
  senior           Senior?
  volunteer        Volunteer?
}

//This data pattern is called specialization

model Senior {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [id], references: [id])
  authorTask Task[] @relation("author")
}

// delted repospderTask
model Volunteer {
  id            Int    @id @default(autoincrement())
  user          User   @relation(fields: [id], references: [id])
  responses     Response[]
  acceptedTask  Task[] @relation("accepted")
}

model Response { 
  id Int @id @default(autoincrement())
  task Task @relation(fields: [taskId], references: [id])
  taskId Int
  responder Volunteer @relation(fields: [responderId], references: [id])
  responderId Int
}


// deleted responder & responderId
model Task {
  id            Int        @id @default(autoincrement())
  author        Senior?    @relation("author", fields: [authorId], references: [id], onDelete: SetNull)
  authorId      Int?
  responses     Response[]
  accepted      Volunteer? @relation("accepted", fields: [acceptedId], references: [id], onDelete: SetNull)
  acceptedId    Int?
  type          TaskType   @default(EMOTIONAL)
  description   String
  creationDate  DateTime   @default(now())
  scheduledDate DateTime
  location      String
}


enum TaskType {
  EMOTIONAL
  PHYSICAL
}

model Messages {
  id         Int    @id @default(autoincrement())
  message    String
  senderId   Int?
  sender     User?  @relation(name: "sender", fields: [senderId], references: [id], onDelete: SetNull)
  receiverId Int?
  receiver   User?  @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: SetNull)
}
